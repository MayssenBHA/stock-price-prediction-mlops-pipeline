name: CI/CD Pipeline

# ============================================================================
# Workflow Triggers
# ============================================================================
on:
  # Trigger on push to deployment branch
  push:
    branches:
      - deployment
      - main
  
  # Trigger on pull requests to validate changes before merge
  pull_request:
    branches:
      - deployment
      - main
  
  # Allow manual workflow triggering from GitHub UI
  workflow_dispatch:

# ============================================================================
# Environment Variables (available to all jobs)
# ============================================================================
env:
  PYTHON_VERSION: '3.9'          
  NODE_VERSION: '18'              
  REGISTRY: docker.io             

# ============================================================================
# Jobs Definition
# ============================================================================
jobs:
  
  # ==========================================================================
  # JOB 1: Backend Testing (CI)
  # ==========================================================================
  test-backend:
    name: Backend Tests (Python/FastAPI)
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'  
          cache-dependency-path: '**/requirements.txt'
      
      # Step 3: Install backend dependencies
      - name: Install Python Dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
        
      # Step 4: Run linting with flake8 (if configured)
      - name: Lint Backend Code with flake8
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 backend/app --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 backend/app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true  # Don't fail the build on linting warnings
      
      # Step 5: Run backend tests with pytest
      - name: Run Backend Tests
        run: |
          cd backend
          # Run pytest with verbose output and coverage
          pytest tests/ -v --tb=short
        env:
          PYTHONUNBUFFERED: 1
          TF_CPP_MIN_LOG_LEVEL: 2  
  
  # ==========================================================================
  # JOB 3: Build and Push Backend Docker Image (CD)
  # ==========================================================================
  build-backend:
    name: Build & Push Backend Image
    runs-on: ubuntu-latest
    needs: [test-backend]  # Wait for backend tests to complete
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # Step 2: Set up Docker Buildx (for advanced build features)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Step 3: Log in to Docker registry
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      # Step 4: Extract metadata for Docker image tags
      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/stock-prediction-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      # Step 5: Build and push backend Docker image
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/stock-prediction-backend:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/stock-prediction-backend:buildcache,mode=max
  
  # ==========================================================================
  # JOB 4: Build and Push Frontend Docker Image (CD)
  # ==========================================================================
  build-frontend:
    name: Build & Push Frontend Image
    runs-on: ubuntu-latest
    needs: [test-backend] 
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Step 3: Log in to Docker registry
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      # Step 4: Extract metadata for Docker image tags
      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/stock-prediction-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      # Step 5: Build and push frontend Docker image
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/stock-prediction-frontend:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/stock-prediction-frontend:buildcache,mode=max
  
  # ==========================================================================
  # JOB 5: Deploy with Docker Compose (CD)
  # ==========================================================================
  deploy:
    name: Deploy with Docker Compose
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend] 
    if: github.event_name == 'push' && github.ref == 'refs/heads/deployment'
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # Step 2: Log in to Docker registry (to pull images)
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      # Step 3: Create necessary directories
      - name: Create Required Directories
        run: |
          mkdir -p backend/saved_models
          mkdir -p backend/uploads
      
      # Step 4: Deploy using docker-compose
      - name: Deploy Application
        run: |
          # Pull latest images
          docker-compose pull
          
          # Start services in detached mode
          docker-compose up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 10
          
          # Check service status
          docker-compose ps
      
      # Step 5: Verify deployment
      - name: Verify Deployment
        run: |
          # Check if backend is responding
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:8000/health || echo "Backend health check failed"
          
          # Check if frontend is responding
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:3000 || echo "Frontend check failed"
          
          # Display container logs for debugging
          echo "=== Backend Logs ==="
          docker-compose logs backend
          echo "=== Frontend Logs ==="
          docker-compose logs frontend
      
      # Step 6: Cleanup (optional - for CI environment)
      - name: Cleanup Containers
        if: always()
        run: |
          docker-compose down -v
        continue-on-error: true
